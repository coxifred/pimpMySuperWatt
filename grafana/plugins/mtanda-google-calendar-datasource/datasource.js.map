{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","scriptjs","GoogleCalendarDatasource","instanceSettings","$q","templateSrv","type","name","clientId","jsonData","scopes","discoveryDocs","q","initialized","deferred","defer","gapi","load","resolve","promise","initialize","then","status","message","title","catch","console","log","err","Promise","auth2","getAuthInstance","currentUser","get","client","init","scope","authInstance","isSignedIn","signIn","user","options","annotation","calendarId","isEmpty","when","calendar","events","list","range","from","toISOString","to","response","result","items","chain","map","event","start","dateTime","date","end","regionId","id","time","valueOf","summary","tags","organizer","displayName","text","description","flatten","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport scriptjs from './libs/script.js';\n\nexport class GoogleCalendarDatasource {\n\n  constructor(instanceSettings, $q, templateSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.clientId = instanceSettings.jsonData.clientId;\n    this.scopes = 'https://www.googleapis.com/auth/calendar.readonly';\n    this.discoveryDocs = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    this.q = $q;\n    this.templateSrv = templateSrv;\n    this.initialized = false;\n  }\n\n  load() {\n    let deferred = this.q.defer();\n    scriptjs('https://apis.google.com/js/api.js', () => {\n      gapi.load('client:auth2', () => {\n        return deferred.resolve();\n      });\n    });\n    return deferred.promise;\n  }\n\n  testDatasource() {\n    return this.initialize().then(() => {\n      return { status: 'success', message: 'Data source is working', title: 'Success' };\n    }).catch(err => {\n      console.log(err);\n      return { status: \"error\", message: err.message, title: \"Error\" };\n    });\n  }\n\n  initialize() {\n    if (this.initialized) {\n      return Promise.resolve(gapi.auth2.getAuthInstance().currentUser.get());\n    }\n\n    return this.load().then(() => {\n      return gapi.client.init({\n        clientId: this.clientId,\n        scope: this.scopes,\n        discoveryDocs: this.discoveryDocs\n      }).then(() => {\n        let authInstance = gapi.auth2.getAuthInstance();\n        if (!authInstance) {\n          throw { message: 'failed to initialize' };\n        }\n        let isSignedIn = authInstance.isSignedIn.get();\n        if (isSignedIn) {\n          this.initialized = true;\n          return authInstance.currentUser.get();\n        }\n        return authInstance.signIn().then(user => {\n          this.initialized = true;\n          return user;\n        });\n      }, err => {\n        console.log(err);\n        throw { message: 'failed to initialize' };\n      });\n    });\n  }\n\n  annotationQuery(options) {\n    var annotation = options.annotation;\n    var calendarId = annotation.calendarId;\n\n    if (_.isEmpty(calendarId)) {\n      return this.q.when([]);\n    }\n\n    return this.initialize().then(() => {\n      return gapi.client.calendar.events.list({\n        'calendarId': calendarId,\n        'timeMin': options.range.from.toISOString(),\n        'timeMax': options.range.to.toISOString(),\n        'showDeleted': false,\n        'singleEvents': true,\n        'maxResults': 250,\n        'orderBy': 'startTime'\n      }).then((response) => {\n        var events = response.result.items;\n\n        var result = _.chain(events)\n          .map((event) => {\n            var start = moment(event.start.dateTime || event.start.date);\n            var end = moment(event.end.dateTime || event.end.date);\n\n            return [\n              {\n                regionId: event.id,\n                annotation: annotation,\n                time: start.valueOf(),\n                title: event.summary,\n                tags: ['Google Calender', event.organizer.displayName],\n                text: event.description ? event.description : \"\",\n              },\n              {\n                regionId: event.id,\n                annotation: annotation,\n                time: end.valueOf(),\n                title: event.summary,\n                tags: ['Google Calendar', event.organizer.displayName],\n                text: event.description ? event.description : \"\",\n              }\n            ];\n          }).flatten().value();\n\n        return result;\n      });\n    });\n  }\n}\n"]}